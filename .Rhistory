Deti$sport <- relevel(Deti$sport, ref = "lh")
model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(model_without_X.nvk11)
#Hledání optimálního modelu
step(model_without_X.nvk11)
#Optimální model tedy eliminuje proměnnou vyska12 s výsledným AIC = 247.18
opt_model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(opt_model_without_X.nvk11)$coefficients
#Logistická regrese s proměnnou X.nvk11
model_with_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11,
data = Deti, family = binomial)
summary(model_with_X.nvk11)
#Hledáme optimální model s proměnnou X.nvk11
step(model_with_X.nvk11)
# Závislost a její míru určujeme pomocí korelace případně lineární regrese
library(DescTools)
library(TeachingDemos)
library(lmtest)
library(corrplot)
library(readxl)
diplomka_tabulka_ZÁKLAD <- read_excel("diplomka - tabulka ZÁKLAD.xls")
View(diplomka_tabulka_ZÁKLAD)
View(diplomka_tabulka_ZÁKLAD)
View(diplomka_tabulka_ZÁKLAD)
# Načtení potřebných knihoven
library(ggplot2)
library(dplyr)
library(stats)
library(car)
# Načtení dat z CSV souboru
data <- diplomka_tabulka_ZÁKLAD
# Zobrazení prvních pár řádků dat
head(data)
# Popisná statistika
summary(data)
hodiny_aktivity <- diplomka_tabulka_ZÁKLAD$`2` + (diplomka_tabulka_ZÁKLAD$`2` - diplomka_tabulka_ZÁKLAD$`3b`)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(hodiny_aktivity, data$`%tuku`, method = "pearson")
tuk <- diplomka_tabulka_ZÁKLAD$`%tuku`
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(hodiny_aktivity, tuk, method = "pearson")
# Popisná statistika
summary(data)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(hodiny_aktivity, tuk, method = "pearson")
hodiny_aktivity
tuk
data2 <- data.frame(hodiny_aktivity, tuk)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$`hodiny_aktivity`, data2$`tuk`, method = "pearson")
correlation
na.omit(data2)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$`hodiny_aktivity`, data2$`tuk`, method = "pearson")
# Zobrazení prvních pár řádků dat
head(data)
# Popisná statistika
summary(data)
# Zobrazení prvních pár řádků dat
head(data2)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$hodiny_aktivity, data2$tuk, method = "pearson")
print(paste("Pearsonův korelační koeficient:", correlation))
data2$hodiny_aktivity
data2$tuk
data2 <- na.omit(data2)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$hodiny_aktivity, data2$tuk, method = "pearson")
print(paste("Pearsonův korelační koeficient:", correlation))
# Lineární regrese
model <- lm(procento.tuku ~ hodiny.aktivity, data = data)
# Souhrn modelu
summary(model)
# Scatter plot s regresní přímkou
ggplot(data, aes(x = hodiny.aktivity, y = procento.tuku)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
# Lineární regrese
model <- lm(data2$tuk ~ data2$hodiny_aktivity)
# Lineární regrese
model <- lm(data2$tuk ~ data2$hodiny_aktivity)
# Souhrn modelu
summary(model)
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$hodiny_aktivity, y = data2$tuk)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$`hodiny_aktivity`, y = data2$`tuk`)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
data2$`hodiny_aktivity`
data2$`tuk`
View(model)
# Lineární regrese
model <- lm(data2$tuk ~ data2$hodiny_aktivity)
# Souhrn modelu
summary(model)
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$`hodiny_aktivity`, y = data2$`tuk`)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$hodiny_aktivity, y = data2$tuk)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
rlang::last_trace()
# Lineární regrese
model <- lm(tuk ~ hodiny_aktivity, data=data2)
# Scatter plot s regresní přímkou
ggplot(data2, aes(x = hodiny_aktivity, y = tuk)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
setwd("C:/Users/XXX/PycharmProjects/NSQL/KCAS")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
# Převod sloupce Date na typ Date a seřazení
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
arrange(Date)
# Zobrazení prvních několika řádků dat
head(data)
## Including Plots
You can also embed plots, for example:
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
# Převod sloupce Date na typ Date a seřazení
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
arrange(Date)
# Zobrazení prvních několika řádků dat
head(data)
# Převod dat na časovou řadu
ts_data <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # měsíční - pro hodnotu Close
ts_data_quarterly <- aggregate(ts_data, nfrequency=4, FUN=mean) # kvartální agregace - průměrná hodnota za kvartál
# Zobrazení časové řady
ts_data
ts_data_quarterly
# Dekompozice časové řady
decomposed <- decompose(ts_data)
# Vizualizace dekompozice
plot(decomposed)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
# Převod sloupce Date na typ Date a seřazení
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
arrange(Date)
# Zobrazení prvních několika řádků dat
head(data)
# Převod dat na časovou řadu
ts_data <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # měsíční - pro hodnotu Close
ts_data_quarterly <- aggregate(ts_data, nfrequency=4, FUN=mean) # kvartální agregace - průměrná hodnota za kvartál
# Zobrazení časové řady
ts_data
ts_data_quarterly
# Dekompozice časové řady
decomposed <- decompose(ts_data)
# Vizualizace dekompozice
plot(decomposed)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
# Převod sloupce Date na typ Date a seřazení
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
arrange(Date)
# Zobrazení prvních několika řádků dat
head(data)
# Převod dat na časovou řadu
ts_data <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # měsíční - pro hodnotu Close
ts_data_quarterly <- aggregate(ts_data, nfrequency=4, FUN=mean) # kvartální agregace - průměrná hodnota za kvartál
# Zobrazení časové řady
ts_data
ts_data_quarterly
# Dekompozice časové řady
decomposed <- decompose(ts_data)
# Vizualizace dekompozice
plot(decomposed)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
# Převod sloupce Date na typ Date a seřazení
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
arrange(Date)
# Zobrazení prvních několika řádků dat
head(data)
# Převod dat na časovou řadu
ts_data <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # měsíční - pro hodnotu Close
ts_data_quarterly <- aggregate(ts_data, nfrequency=4, FUN=mean) # kvartální agregace - průměrná hodnota za kvartál
# Zobrazení časové řady
ts_data
ts_data_quarterly
# Dekompozice časové řady
decomposed <- decompose(ts_data)
# Vizualizace dekompozice
plot(decomposed)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
# Načtení dat
data <- read.csv("./monthly_averages.csv")
# Převod sloupce Date na typ Date a seřazení
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
arrange(Date)
# Zobrazení prvních několika řádků dat
head(data)
# Převod dat na časovou řadu
ts_data <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # měsíční - pro hodnotu Close
ts_data_quarterly <- aggregate(ts_data, nfrequency=4, FUN=mean) # kvartální agregace - průměrná hodnota za kvartál
# Zobrazení časové řady
ts_data
ts_data_quarterly
# Dekompozice časové řady
decomposed <- decompose(ts_data)
# Vizualizace dekompozice
plot(decomposed)
# Grafy jednotlivých proměnných s vyhlazením
p1 <- ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Close")
p2 <- ggplot(data, aes(x = Date, y = Volume)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Volume")
p3 <- ggplot(data, aes(x = Date, y = Open)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Open")
# Zobrazení grafů vedle sebe
grid.arrange(p1, p2, p3, ncol = 3)
# Předpověď na základě modelů
fc_close <- forecast(model_close, h = 12)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(forecast)
library(gridExtra)
library(ggplot2)
#---------------------------------------------------------------------------
data <- read.csv("./monthly_averages.csv")
# Převod datumu na správný datový typ Date
data <- data %>%
mutate(Date = as.Date(Date, format="%Y-%m-%d"))
data <- data %>%
arrange(Date) # seřazení datumu
data
# Date - datum den
# Open - Cena otevření
# High - Nejvyšší cena dne
# Low - Nejnižší cena dne
# Close - Cena, kdy se trh uzavíral
# Adj. Close - Zpřesněná uzavírací cena
# Volume - Suma, za kolik se tradovalo v daný den
# Převedu data do objektu časové řady
ts_data <- ts(data, start = c(2012, 1), frequency = 12)  # roční pro všechny hodnoty Mety
ts_data
ts_data <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # ročí - pro hodnotu Close
ts_data_quarterly <- aggregate(ts_data, nfrequency=4, FUN=mean) # kvartál - mean(ni -> ni+3)
# výstupy
ts_data
ts_data_quarterly
# dekompozice časové řady
decomposed <- decompose(ts_data)
# vizualizace
plot(decomposed)
#---------------------------------------------------------------------------
# Budeme porovnávat - náhled do dat
# 1. vytvoříme Time Series pro dané proměnné
ts_close <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # ročí - pro hodnotu Close
ts_volume <- ts(data$Volume, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # ročí - pro hodnotu Volume
ts_open <- ts(data$Open, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # ročí - pro hodnotu Volume
plot(ts_close)
plot(ts_volume)
plot(ts_open)
# grafy jedotlivých proměnných s vyhlazením
p1 <- ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Close")
p2 <- ggplot(data, aes(x = Date, y = Volume)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Volume")
p3 <- ggplot(data, aes(x = Date, y = Open)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Open")
# zobrazení
grid.arrange(p1, p2, p3, ncol = 3)
#---------------------------------------------------------------------------
# 2. Dekompozice
decomposed_close <- decompose(ts_close, type = "multiplicative")
decomposed_volume <- decompose(ts_volume, type = "multiplicative")
decomposed_open <- decompose(ts_open, type = "multiplicative")
# plotneme pro vizualizaci trendu, sezony....
# Vizualizace dekompozice
plot(decomposed_close)
plot(decomposed_volume)
plot(decomposed_open)
#---------------------------------------------------------------------------
# 3. Analýza
# Autokorelační funkce
residual_close <- decomposed_close$random
residual_close <- na.omit(residual_close)
acf(residual_close, main="ACF pro close")
residual_open <- decomposed_open$random
residual_open <- na.omit(residual_open)
acf(residual_open, main="ACF pro open")
# Open a close vykazují téměř stejné hodnoty autokorelace, téměř se nedostaneme
# nad prahovou hodnotu
residual_volume <- decomposed_volume$random
residual_volume <- na.omit(residual_volume)
acf(residual_volume, main="ACF pro volume")
# U složky volume můžeme pozorovat významnou autokorelaci, která vyznačuje
# přítomnost krátkodobých závislostí.
# V dlouhodobém trendu se již nacházíme pod prahovou hodnotou
#---------------------------------------------------------------------------
# Jednoduché exponenciální vyrovnání
ses_close <- ses(data$Close, h = 12)
ses_open <- ses(data$Open, h = 12)
ses_volume <- ses(data$Volume, h = 12)
# Nahrání výsledků k půlvodnímu datasetu
data <- data %>%
mutate(SES_Close = fitted(ses_close),
SES_Open = fitted(ses_open),
SES_Volume = fitted(ses_volume))
# Vizualizace
p4 <- ggplot(data, aes(x = Date)) +
geom_line(aes(y = Close), color = "blue") +
geom_line(aes(y = SES_Close), color = "purple", size = 1) +
labs(title = "Close s vyhazením Simple Exponential Smoothing", x = "Date", y = "Close Price")
p5 <- ggplot(data, aes(x = Date)) +
geom_line(aes(y = Volume), color = "blue") +
geom_line(aes(y = SES_Volume), color = "purple", size = 1) +
labs(title = "Volume s vyhlazením Simple Exponential Smoothing", x = "Date", y = "Volume")
p6 <- ggplot(data, aes(x = Date)) +
geom_line(aes(y = Open), color = "blue") +
geom_line(aes(y = SES_Open), color = "purple", size = 1) +
labs(title = "Open Price s vyhlazením Simple Exponential Smoothing", x = "Date", y = "Open Price")
# Zobrazení grafů vedle sebe
grid.arrange(p4, p5, p6, ncol = 1)
#---------------------------------------------------------------------------
# Vytvoření modelu sezónnosti pomocí tslm
# Model sezónnosti pro Close
model_close <- tslm(ts_close ~ trend + season)
summary(model_close)
# Model sezónnosti pro Open
model_open <- tslm(ts_open ~ trend + season)
summary(model_open)
# Model sezónnosti pro Volume
model_volume <- tslm(ts_volume ~ trend + season)
summary(model_volume)
#---------------------------------------------------------------------------
# Předpověď pomocí modelu sezónnosti
fc_close <- forecast(model_close, h = 12)
fc_open <- forecast(model_open, h = 12)
fc_volume <- forecast(model_volume, h = 12)
#---------------------------------------------------------------------------
# Vizualizace výsledků modelu a předpovědi
p7 <- autoplot(fc_close) +
labs(title = "Předpověď pro Close Price", x = "Date", y = "Close Price")
p8 <- autoplot(fc_open) +
labs(title = "Předpověď pro Open Price", x = "Date", y = "Open Price")
p9 <- autoplot(fc_volume) +
labs(title = "Předpověď pro Volume", x = "Date", y = "Volume")
# Zobrazení grafů vedle sebe
grid.arrange(p7, p8, p9, ncol = 1)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Předpověď pomocí modelu sezónnosti
fc_close <- forecast(model_close, h = 12)
fc_open <- forecast(model_open, h = 12)
fc_volume <- forecast(model_volume, h = 12)
View(fc_close)
summary(model_volume)
forecast(model_close, h = 12)
forecast(model_open, h = 12)
summary(model_volume)
model_open <- tslm(ts_open ~ trend + season)
summary(model_open)
#---------------------------------------------------------------------------
# Budeme porovnávat - náhled do dat
# 1. vytvoříme Time Series pro dané proměnné
ts_close <- ts(data$Close, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 4) # ročí - pro hodnotu Close
ts_volume <- ts(data$Volume, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # ročí - pro hodnotu Volume
ts_open <- ts(data$Open, start = c(year(min(data$Date)), month(min(data$Date))), frequency = 12) # ročí - pro hodnotu Volume
plot(ts_close)
plot(ts_volume)
# grafy jedotlivých proměnných s vyhlazením
p1 <- ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Close")
p2 <- ggplot(data, aes(x = Date, y = Volume)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Volume")
p3 <- ggplot(data, aes(x = Date, y = Open)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE, size = 0.5) +
ggtitle("Open")
# zobrazení
grid.arrange(p1, p2, p3, ncol = 3)
#---------------------------------------------------------------------------
# 2. Dekompozice
decomposed_close <- decompose(ts_close, type = "multiplicative")
decomposed_volume <- decompose(ts_volume, type = "multiplicative")
decomposed_open <- decompose(ts_open, type = "multiplicative")
# Vizualizace dekompozice
plot(decomposed_close)
plot(decomposed_volume)
plot(decomposed_open)
# Vizualizace dekompozice
plot(decomposed_close)
plot(decomposed_volume)
# Vizualizace dekompozice
plot(decomposed_close)
plot(decomposed_volume)
plot(decomposed_open)
# Vizualizace dekompozice
plot(decomposed_close)
plot(decomposed_open)
# Vizualizace dekompozice
plot(decomposed_close)
plot(decomposed_open)
# Vizualizace dekompozice
plot(decomposed_close)
