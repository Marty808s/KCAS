pred_nechce_doporucuje <- predict(lda_model_nechce_doporucuje)$class
pred_chce_spokojen <- predict(lda_model_chce_spokojen)$class
# Skutečné hodnoty
actual_nespokojen <- Sat_filtered$nespokojen_a_chce_odejit
actual_nechce_nedoporuci <- Sat_filtered$spokojen_nechce_odejit_nedoporuci
actual_nechce_doporucuje <- Sat_filtered$spokojen_nechce_odejit_doporucuje
actual_chce_spokojen <- Sat_filtered$chce_odejit_ale_je_spokojen
# Výpočet přesnosti
accuracy_nespokojen <- mean(pred_nespokojen == actual_nespokojen)
accuracy_nechce_nedoporuci <- mean(pred_nechce_nedoporuci == actual_nechce_nedoporuci)
accuracy_nechce_doporucuje <- mean(pred_nechce_doporucuje == actual_nechce_doporucuje)
accuracy_chce_spokojen <- mean(pred_chce_spokojen == actual_chce_spokojen)
# Výpis výsledků
accuracy_nespokojen
accuracy_nechce_nedoporuci
accuracy_nechce_doporucuje
accuracy_chce_spokojen
#Načtení potřebných knihoven
library(tidyverse)
library(dplyr)
library(MASS)
#Načtení dat ze souboru
load("SatData.RData")
#Přejmenování datového rámce pro lepší přehlednost
Sat <- satisfaction
colnames(Sat) <- make.unique(colnames(Sat))
#Přidání nových sloupců k datovému rámci
Sat <- Sat %>%
mutate(
nespokojen_a_chce_odejit = ifelse(satisfaction < 5 & loyalty < 5, 1, 0),
spokojen_nechce_odejit_nedoporuci = ifelse(satisfaction >= 5 & loyalty >= 5 & recommendation < 5, 1, 0),
spokojen_nechce_odejit_doporucuje = ifelse(satisfaction >= 5 & loyalty >= 5 & recommendation >= 5, 1, 0),
chce_odejit_ale_je_spokojen = ifelse(satisfaction >= 5 & loyalty < 5, 1, 0)
)
#Kontrola nových sloupců
table(Sat$nespokojen_a_chce_odejit)
table(Sat$spokojen_nechce_odejit_nedoporuci)
table(Sat$spokojen_nechce_odejit_doporucuje)
table(Sat$chce_odejit_ale_je_spokojen)
#Výběr proměnných pro diskriminační analýzu
selected_vars <- c("reputation", "trustworthiness", "seriousness", "solidness","care",
"exp_products", "exp_services", "service", "solutions", "quality",
"qual_products", "qual_services", "range_products", "qual_personal", "qual_overall",
"benefits", "investments", "price", "gender")
all_vars <- c(selected_vars, "nespokojen_a_chce_odejit",
"spokojen_nechce_odejit_nedoporuci",
"spokojen_nechce_odejit_doporucuje", "chce_odejit_ale_je_spokojen")
#Filtrace dat na základě vybraných proměnných a skupiny
Sat_filtered <- Sat %>%
dplyr::select(all_of(all_vars)) %>%
filter(complete.cases(.))
#Provádění diskriminační analýzy pro každou binární proměnnou zvlášť
lda_model_nespokojen <- lda(nespokojen_a_chce_odejit ~ ., data = Sat_filtered)
lda_model_nechce_nedoporuci <- lda(spokojen_nechce_odejit_nedoporuci ~ ., data = Sat_filtered)
lda_model_nechce_doporucuje <- lda(spokojen_nechce_odejit_doporucuje ~ ., data = Sat_filtered)
lda_model_chce_spokojen <- lda(chce_odejit_ale_je_spokojen ~ ., data = Sat_filtered)
#Výsledky diskriminační analýzy
print(lda_model_nespokojen)
print(lda_model_nechce_nedoporuci)
print(lda_model_nechce_doporucuje)
print(lda_model_chce_spokojen)
#Predikce skupin pro každou binární proměnnou
predictions_nespokojen <- predict(lda_model_nespokojen)
predictions_nechce_nedoporuci <- predict(lda_model_nechce_nedoporuci)
predictions_nechce_doporucuje <- predict(lda_model_nechce_doporucuje)
predictions_chce_spokojen <- predict(lda_model_chce_spokojen)
#Přidání predikovaných skupin do datového rámce
Sat_filtered <- Sat_filtered %>%
mutate(predicted_nespokojen = predictions_nespokojen$class,
predicted_nechce_nedoporuci = predictions_nechce_nedoporuci$class,
predicted_nechce_doporucuje = predictions_nechce_doporucuje$class,
predicted_chce_spokojen = predictions_chce_spokojen$class)
#Kontingenční tabulky pro skutečné vs. predikované skupiny
table(Sat_filtered$nespokojen_a_chce_odejit, Sat_filtered$predicted_nespokojen)
table(Sat_filtered$spokojen_nechce_odejit_nedoporuci, Sat_filtered$predicted_nechce_nedoporuci)
table(Sat_filtered$spokojen_nechce_odejit_doporucuje, Sat_filtered$predicted_nechce_doporucuje)
table(Sat_filtered$chce_odejit_ale_je_spokojen, Sat_filtered$predicted_chce_spokojen)
library(ggplot2)
#Definování barvy pro jednotlivé skupiny
Sat_filtered <- Sat_filtered %>%
mutate(group = case_when(
nespokojen_a_chce_odejit == 1 ~ "Nespokojený a chce odejít",
spokojen_nechce_odejit_nedoporuci == 1 ~ "Spokojený, nechce odejít, ale nedoporučuje",
spokojen_nechce_odejit_doporucuje == 1 ~ "Spokojený, nechce odejít a doporučuje",
chce_odejit_ale_je_spokojen == 1 ~ "Chce odejít, ale je spokojený",
TRUE ~ "Ostatní"
))
#Vytvoření grafu
ggplot(Sat_filtered, aes(x = trustworthiness, y = exp_services, color = group)) +
geom_point(alpha = 0.9) +
labs(title = "Diskriminační Analýza: Hodnocení Důvěryhodnosti a Zkušeností",
x = "Důvěryhodnost (trustworthiness)",
y = "Zkušenosti s poskytovanými službami (exp_services)",
color = "Skupina") +
theme_minimal()
# Predikce pomocí LDA modelů
pred_nespokojen <- predict(lda_model_nespokojen)$class
pred_nechce_nedoporuci <- predict(lda_model_nechce_nedoporuci)$class
pred_nechce_doporucuje <- predict(lda_model_nechce_doporucuje)$class
pred_chce_spokojen <- predict(lda_model_chce_spokojen)$class
# Skutečné hodnoty
actual_nespokojen <- Sat_filtered$nespokojen_a_chce_odejit
actual_nechce_nedoporuci <- Sat_filtered$spokojen_nechce_odejit_nedoporuci
actual_nechce_doporucuje <- Sat_filtered$spokojen_nechce_odejit_doporucuje
actual_chce_spokojen <- Sat_filtered$chce_odejit_ale_je_spokojen
# Výpočet přesnosti
accuracy_nespokojen <- mean(pred_nespokojen == actual_nespokojen)
accuracy_nechce_nedoporuci <- mean(pred_nechce_nedoporuci == actual_nechce_nedoporuci)
accuracy_nechce_doporucuje <- mean(pred_nechce_doporucuje == actual_nechce_doporucuje)
accuracy_chce_spokojen <- mean(pred_chce_spokojen == actual_chce_spokojen)
# Výpis výsledků
accuracy_nespokojen
accuracy_nechce_nedoporuci
accuracy_nechce_doporucuje
accuracy_chce_spokojen
# Při použití hlavních proměnných je přesnost modelů menší, nicméně stále velmi vysoká.
library(fmsb)
#Načtení dat
load("Deti.RData")
#Zobrazení prvních řádků dat
head(Deti)
#Vytvoření lineárního modelu
model <- lm(X.nvk12 ~ pohlavi + sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11, data = Deti)
# Kroková regrese pro nalezení optimálního modelu
opt_model <- step(model)
#Step:  AIC=1042.77
#X.nvk12 ~ sport + hmot12 + vyska12 + bmi12 + syst12 + X.nvk11
#Df Sum of Sq   RSS    AIC
#- syst12   1     169.4 22816 1042.4
#<none>                 22646 1042.8
#- bmi12    1     260.7 22907 1043.3
#- vyska12  1     278.9 22925 1043.5
#- hmot12   1     298.6 22945 1043.7
#- sport    2    1149.6 23796 1049.8
#- X.nvk11  1   15032.3 37679 1153.8
model <- lm(X.nvk12 ~ sport + hmot12 + vyska12 + bmi12 + X.nvk11, data = Deti)
#Interpretace koeficientu sport
coef_sport <- summary(model)$coefficients["sportplavani",]
coef_sport
#Z koeficientů jsem si vybral koeficient pro plavání, protože je statisticky významný. p = 0.004214542
#  Estimate  Std. Error     t value    Pr(>|t|)
#  6.355377838 2.197175241 2.892522052 0.004214542
#Tento koeficinet znamená, že průměrná vitální kapacita plic dětí, které mají za sport
#plavání je o 6.355 vyšší, než u dětí, které dělají atletiku (reference pro proměnnou sport)
coef_nvk <- summary(model)$coefficients["X.nvk11",]
coef_nvk
summary(model)$coefficients
summary(model)$coefficients
#Z koeficientů jsem si vybral koeficient pro plavání, protože je statisticky významný. p = 0.004214542
#  Estimate  Std. Error     t value    Pr(>|t|)
#  6.355377838 2.197175241 2.892522052 0.004214542
#Tento koeficinet znamená, že průměrná vitální kapacita plic dětí, které mají za sport
#plavání je o 6.355 vyšší, než u dětí, které dělají atletiku (reference pro proměnnou sport)
coef_nvk <- summary(model)$coefficients["X.nvk11",]
coef_nvk
#Hledání optimálního modelu
step(model_without_X.nvk11)
library(fmsb)
#Načtení dat
load("Deti.RData")
#Zobrazení prvních řádků dat
head(Deti)
#Vytvoření lineárního modelu
model <- lm(X.nvk12 ~ pohlavi + sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11, data = Deti)
# Kroková regrese pro nalezení optimálního modelu
opt_model <- step(model)
#Step:  AIC=1042.77
#X.nvk12 ~ sport + hmot12 + vyska12 + bmi12 + syst12 + X.nvk11
#Df Sum of Sq   RSS    AIC
#- syst12   1     169.4 22816 1042.4
#<none>                 22646 1042.8
#- bmi12    1     260.7 22907 1043.3
#- vyska12  1     278.9 22925 1043.5
#- hmot12   1     298.6 22945 1043.7
#- sport    2    1149.6 23796 1049.8
#- X.nvk11  1   15032.3 37679 1153.8
model <- lm(X.nvk12 ~ sport + hmot12 + vyska12 + bmi12 + X.nvk11, data = Deti)
#Interpretace koeficientu sport
coef_sport <- summary(model)$coefficients["sportplavani",]
coef_sport
#Z koeficientů jsem si vybral koeficient pro plavání, protože je statisticky významný. p = 0.004214542
#  Estimate  Std. Error     t value    Pr(>|t|)
#  6.355377838 2.197175241 2.892522052 0.004214542
#Tento koeficinet znamená, že průměrná vitální kapacita plic dětí, které mají za sport
#plavání je o 6.355 vyšší, než u dětí, které dělají atletiku (reference pro proměnnou sport),
#za předpokladu, že ostatní proměnné jsou v modelu konstantní.
coef_nvk <- summary(model)$coefficients["X.nvk11",]
coef_nvk
#Kvalita modelu
summary(model)
summary(model)$coefficients
#Grafy modelu pro hodnocení kvality
par(mfrow = c(2, 2))
plot(model)
#Test normality reziduí
shapiro.test(residuals(model))
#p-value = 0.009412, to znamená, že memáme normální rozdělení
#náhled na kategorické proměnné pro správnou deifnici predikce
levels(Deti$pohlavi)
levels(Deti$sport)
#Definování specifického případu - kluk, 12 let, 40kg, 160cm, sport = atletika, vitální kapacita v 11 = 100
predikce <- data.frame(
pohlavi = factor("m", levels = levels(Deti$pohlavi)),
sport = factor("atl", levels = levels(Deti$sport)),
hmot12 = 40,
vyska12 = 160,
bmi12 = 40 / (1.6^2),
syst12 = mean(Deti$syst12, na.rm = TRUE),
dias12 = mean(Deti$dias12, na.rm = TRUE),
X.nvk11 = 100
)
#Predikce vitální kapacity plic ve 12 letech
predicted_val <- predict(model, newdata = predikce)
predicted_val
#Vytvoříme si binární proměnnou pro hodnoty vitální kapacity plic, kde při převýšení hodnoty 100 dáme 1, jinak 0
kapacita12_binarni <- ifelse(Deti$X.nvk12 > 100, 1, 0)
#Zvolil jsem logistickou regresi, jelikož máme binární proměnnou,
#prvně vytvoříme model bez proměnné X.nvk11
#Přetypování referenčního sportu, kvůli následné analýze
#Vytvoříme maximální model pro jednotlivé scénaře, tedy s a bez proměnné X.nvk11
Deti$sport <- relevel(Deti$sport, ref = "lh")
model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(model_without_X.nvk11)
#Hledání optimálního modelu
step(model_without_X.nvk11)
#Hledání optimálního modelu
step(model_without_X.nvk11)
#Hledání optimálního modelu
step(model_without_X.nvk11)
#Optimální model tedy eliminuje proměnnou vyska12 s výsledným AIC = 247.18
opt_model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
#Hledáme optimální model s proměnnou X.nvk11
step(model_with_X.nvk11)
#Logistická regrese s proměnnou X.nvk11
model_with_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11,
data = Deti, family = binomial)
summary(model_with_X.nvk11)
#Hledáme optimální model s proměnnou X.nvk11
step(model_with_X.nvk11)
#Porovnání kvality modelů
#Porovnání AIC
AIC(opt_model_without_X.nvk11, model_with_X.nvk11)
#                           df    AIC
#opt_model_without_X.nvk11  7 247.1812
#model_with_X.nvk11         9 208.5477
#Podle hodnocení AIC (Akaikeho kritérium) je lepší model s vitální kapacitou v 11 letech,
#poskytuje tedy lepší přizpůsobení datům a složitosti modelu.
NagelkerkeR2(model_with_X.nvk11)
NagelkerkeR2(opt_model_without_X.nvk11)
#Podle NAgelkerkeR2 vysvětluje model s vitální kapacitou v 11 letech 44.03% variability,
#bez vitální kapacity v 11 letech vysvětluje 23.47%. Model s vitální kapcitou v 11 letech je přesnější
plot(model_with_X.nvk11)
plot(opt_model_without_X.nvk11)
#Porovnání šancí na vitální kapacitu plic větší než 100 % mezi atletikou a plaváním
levels(Deti$sport)
odds_ratio_atletika <- exp(coef(model_with_X.nvk11)["sportatl"])
odds_ratio_plavani <- exp(coef(model_with_X.nvk11)["sportplavani"])
odds_ratio_plavani / odds_ratio_atletika
#Z porovnání nám vychází, že dítě, které dělá plavání má 3.88668 krát větší šanci oproti dítěti,
#Porovnání kvality modelů
#Porovnání AIC
AIC(opt_model_without_X.nvk11, model_with_X.nvk11)
summary(opt_model_without_X.nvk11)$coefficients
#Odhadnutá regresní rovnice:
summary(model_with_X.nvk11)$coefficients
#Logistická regrese s proměnnou X.nvk11
model_with_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11,
data = Deti, family = binomial)
summary(model_with_X.nvk11)
#Hledáme optimální model s proměnnou X.nvk11
step(model_with_X.nvk11)
#Odhadnutá regresní rovnice:
summary(model_with_X.nvk11)$coefficients
#Vytvoříme si binární proměnnou pro hodnoty vitální kapacity plic, kde při převýšení hodnoty 100 dáme 1, jinak 0
kapacita12_binarni <- ifelse(Deti$X.nvk12 > 100, 1, 0)
#Zvolil jsem logistickou regresi, jelikož máme binární proměnnou,
#prvně vytvoříme model bez proměnné X.nvk11
#Přetypování referenčního sportu, kvůli následné analýze
#Vytvoříme maximální model pro jednotlivé scénaře, tedy s a bez proměnné X.nvk11
Deti$sport <- relevel(Deti$sport, ref = "lh")
model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(model_without_X.nvk11)
#Hledání optimálního modelu
step(model_without_X.nvk11)
#Optimální model tedy eliminuje proměnnou vyska12 s výsledným AIC = 247.18
opt_model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(opt_model_without_X.nvk11)$coefficients
#Logistická regrese s proměnnou X.nvk11
model_with_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11,
data = Deti, family = binomial)
summary(model_with_X.nvk11)
#Hledáme optimální model s proměnnou X.nvk11
step(model_with_X.nvk11)
#Odhadnutá regresní rovnice:
summary(model_with_X.nvk11)$coefficients
#Porovnání kvality modelů
#Porovnání AIC
AIC(opt_model_without_X.nvk11, model_with_X.nvk11)
#                           df    AIC
#opt_model_without_X.nvk11  7 247.1812
#model_with_X.nvk11         9 208.5477
#Podle hodnocení AIC (Akaikeho kritérium) je lepší model s vitální kapacitou v 11 letech,
#poskytuje tedy lepší přizpůsobení datům a složitosti modelu.
NagelkerkeR2(model_with_X.nvk11)
NagelkerkeR2(opt_model_without_X.nvk11)
#Podle NAgelkerkeR2 vysvětluje model s vitální kapacitou v 11 letech 44.03% variability,
#bez vitální kapacity v 11 letech vysvětluje 23.47%. Model s vitální kapcitou v 11 letech je přesnější
plot(model_with_X.nvk11)
odds_ratio_plavani <- exp(coef(model_with_X.nvk11)["sportplavani"])
odds_ratio_plavani / odds_ratio_atletika
View(model_without_X.nvk11)
library(fmsb)
#Načtení dat
load("Deti.RData")
#Zobrazení prvních řádků dat
head(Deti)
#Vytvoření lineárního modelu
model <- lm(X.nvk12 ~ pohlavi + sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11, data = Deti)
# Kroková regrese pro nalezení optimálního modelu
opt_model <- step(model)
#Step:  AIC=1042.77
#X.nvk12 ~ sport + hmot12 + vyska12 + bmi12 + syst12 + X.nvk11
#Df Sum of Sq   RSS    AIC
#- syst12   1     169.4 22816 1042.4
#<none>                 22646 1042.8
#- bmi12    1     260.7 22907 1043.3
#- vyska12  1     278.9 22925 1043.5
#- hmot12   1     298.6 22945 1043.7
#- sport    2    1149.6 23796 1049.8
#- X.nvk11  1   15032.3 37679 1153.8
model <- lm(X.nvk12 ~ sport + hmot12 + vyska12 + bmi12 + X.nvk11, data = Deti)
#Interpretace koeficientu sport
coef_sport <- summary(model)$coefficients["sportplavani",]
coef_sport
#Z koeficientů jsem si vybral koeficient pro plavání, protože je statisticky významný. p = 0.004214542
#  Estimate  Std. Error     t value    Pr(>|t|)
#  6.355377838 2.197175241 2.892522052 0.004214542
#Tento koeficinet znamená, že průměrná vitální kapacita plic dětí, které mají za sport
#plavání je o 6.355 vyšší, než u dětí, které dělají atletiku (reference pro proměnnou sport),
#za předpokladu, že ostatní proměnné jsou v modelu konstantní.
coef_nvk <- summary(model)$coefficients["X.nvk11",]
coef_nvk
#Kvalita modelu
summary(model)
summary(model)$coefficients
#Grafy modelu pro hodnocení kvality
par(mfrow = c(2, 2))
plot(model)
#Test normality reziduí
shapiro.test(residuals(model))
#p-value = 0.009412, to znamená, že memáme normální rozdělení
#náhled na kategorické proměnné pro správnou deifnici predikce
levels(Deti$pohlavi)
levels(Deti$sport)
#Definování specifického případu - kluk, 12 let, 40kg, 160cm, sport = atletika, vitální kapacita v 11 = 100
predikce <- data.frame(
pohlavi = factor("m", levels = levels(Deti$pohlavi)),
sport = factor("atl", levels = levels(Deti$sport)),
hmot12 = 40,
vyska12 = 160,
bmi12 = 40 / (1.6^2),
syst12 = mean(Deti$syst12, na.rm = TRUE),
dias12 = mean(Deti$dias12, na.rm = TRUE),
X.nvk11 = 100
)
#Predikce vitální kapacity plic ve 12 letech
predicted_val <- predict(model, newdata = predikce)
predicted_val
#Vytvoříme si binární proměnnou pro hodnoty vitální kapacity plic, kde při převýšení hodnoty 100 dáme 1, jinak 0
kapacita12_binarni <- ifelse(Deti$X.nvk12 > 100, 1, 0)
#Zvolil jsem logistickou regresi, jelikož máme binární proměnnou,
#prvně vytvoříme model bez proměnné X.nvk11
#Přetypování referenčního sportu, kvůli následné analýze
#Vytvoříme maximální model pro jednotlivé scénaře, tedy s a bez proměnné X.nvk11
Deti$sport <- relevel(Deti$sport, ref = "lh")
model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(model_without_X.nvk11)
#Hledání optimálního modelu
step(model_without_X.nvk11)
#Optimální model tedy eliminuje proměnnou vyska12 s výsledným AIC = 247.18
opt_model_without_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + bmi12 + syst12 + dias12,
data = Deti, family = binomial)
summary(opt_model_without_X.nvk11)$coefficients
#Logistická regrese s proměnnou X.nvk11
model_with_X.nvk11 <- glm(kapacita12_binarni ~ sport + hmot12 + vyska12 + bmi12 + syst12 + dias12 + X.nvk11,
data = Deti, family = binomial)
summary(model_with_X.nvk11)
#Hledáme optimální model s proměnnou X.nvk11
step(model_with_X.nvk11)
# Závislost a její míru určujeme pomocí korelace případně lineární regrese
library(DescTools)
library(TeachingDemos)
library(lmtest)
library(corrplot)
library(readxl)
diplomka_tabulka_ZÁKLAD <- read_excel("diplomka - tabulka ZÁKLAD.xls")
View(diplomka_tabulka_ZÁKLAD)
View(diplomka_tabulka_ZÁKLAD)
View(diplomka_tabulka_ZÁKLAD)
# Načtení potřebných knihoven
library(ggplot2)
library(dplyr)
library(stats)
library(car)
# Načtení dat z CSV souboru
data <- diplomka_tabulka_ZÁKLAD
# Zobrazení prvních pár řádků dat
head(data)
# Popisná statistika
summary(data)
hodiny_aktivity <- diplomka_tabulka_ZÁKLAD$`2` + (diplomka_tabulka_ZÁKLAD$`2` - diplomka_tabulka_ZÁKLAD$`3b`)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(hodiny_aktivity, data$`%tuku`, method = "pearson")
tuk <- diplomka_tabulka_ZÁKLAD$`%tuku`
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(hodiny_aktivity, tuk, method = "pearson")
# Popisná statistika
summary(data)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(hodiny_aktivity, tuk, method = "pearson")
hodiny_aktivity
tuk
data2 <- data.frame(hodiny_aktivity, tuk)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$`hodiny_aktivity`, data2$`tuk`, method = "pearson")
correlation
na.omit(data2)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$`hodiny_aktivity`, data2$`tuk`, method = "pearson")
# Zobrazení prvních pár řádků dat
head(data)
# Popisná statistika
summary(data)
# Zobrazení prvních pár řádků dat
head(data2)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$hodiny_aktivity, data2$tuk, method = "pearson")
print(paste("Pearsonův korelační koeficient:", correlation))
data2$hodiny_aktivity
data2$tuk
data2 <- na.omit(data2)
# Korelace mezi hodinami aktivity a procentem tělesného tuku
correlation <- cor(data2$hodiny_aktivity, data2$tuk, method = "pearson")
print(paste("Pearsonův korelační koeficient:", correlation))
# Lineární regrese
model <- lm(procento.tuku ~ hodiny.aktivity, data = data)
# Souhrn modelu
summary(model)
# Scatter plot s regresní přímkou
ggplot(data, aes(x = hodiny.aktivity, y = procento.tuku)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
# Lineární regrese
model <- lm(data2$tuk ~ data2$hodiny_aktivity)
# Lineární regrese
model <- lm(data2$tuk ~ data2$hodiny_aktivity)
# Souhrn modelu
summary(model)
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$hodiny_aktivity, y = data2$tuk)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$`hodiny_aktivity`, y = data2$`tuk`)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
data2$`hodiny_aktivity`
data2$`tuk`
View(model)
# Lineární regrese
model <- lm(data2$tuk ~ data2$hodiny_aktivity)
# Souhrn modelu
summary(model)
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$`hodiny_aktivity`, y = data2$`tuk`)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
# Scatter plot s regresní přímkou
ggplot(data, aes(x = data2$hodiny_aktivity, y = data2$tuk)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
rlang::last_trace()
# Lineární regrese
model <- lm(tuk ~ hodiny_aktivity, data=data2)
# Scatter plot s regresní přímkou
ggplot(data2, aes(x = hodiny_aktivity, y = tuk)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Vztah mezi hodinami aktivity a procentem tělesného tuku",
x = "Hodiny aktivity za týden",
y = "% tělesného tuku")
setwd("C:/Users/XXX/PycharmProjects/NSQL/KCAS")
